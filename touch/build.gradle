version '1.0-SNAPSHOT'

buildscript {
    dependencies {
        classpath "io.qameta.allure:allure-gradle:2.8.1"
    }
}

sourceSets {
    main {
        resources {
            srcDirs "src/main/resources"
        }
    }
}

apply plugin: 'io.qameta.allure'

def allureVersion = '2.17.3'
allure{
    configuration = 'compile'
    aspectjweaver = true
    version = allureVersion
    resultsDir = file("${rootProject.buildDir}${File.separator}allure-results")
    reportDir = file("${rootProject.buildDir}${File.separator}allure-report")
}

dependencies {
    api (project(':mc2')) {
            exclude group: 'org.testng', module: 'testng'
            exclude group: 'io.qameta.allure'
        }
    api  group: 'io.qameta.allure', name: 'allure-cucumber7-jvm', version: '2.17.3'
    api  group: 'io.cucumber', name: 'cucumber-java', version: '7.2.3'
    api  group: 'io.cucumber', name: 'cucumber-testng', version: '7.2.3'
//        compile group: 'com.github.kirlionik', name: 'allure-cucumber-plugin', version: '1.0.2'
    api  group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.13.1'

    api  group: 'ch.qos.logback', name: 'logback-core', version: '1.2.10'
    api  group: 'org.slf4j', name: 'slf4j-api', version: '1.7.34'
    api  group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.10'
}

tasks.withType(Copy) { duplicatesStrategy = DuplicatesStrategy.EXCLUDE }

def baseXmlPath = "/src/test/resources/"
def tenantName
def suite="all"
def env = 'testing'

tasks.withType(Test) {
    systemProperties = System.getProperties()
    tenantName = System.getProperty("tenant", "all")
}

// ========= !! TASKS FOR SUITES !! ============== //

task runFacebookTests(type:Test) {
    useTestNG() {
        ignoreFailures = true
        suites baseXmlPath + tenantName + "/facebook.xml"
    }
}

task runTwitterTests(type:Test) {
    useTestNG() {
        ignoreFailures = true
        suites baseXmlPath + tenantName + "/twitter.xml"
    }
}

task runAbcTests(type:Test) {
    useTestNG() {
        ignoreFailures = true
        suites baseXmlPath + tenantName + "/abc.xml"
    }
}

task runWhatsAppOrcaTests(type:Test) {
    useTestNG() {
        ignoreFailures = true
        suites baseXmlPath + tenantName + "/whatapp_orca.xml"
    }
}

task runBaseTests(type:Test) {
    useTestNG() {
        useDefaultListeners = true
        ignoreFailures = true
        suites baseXmlPath + tenantName +"/mastercheck.xml"
    }
    reports.html.enabled = false
}

task runTieTests(type:Test) {
    useTestNG() {
        ignoreFailures = true
        suites baseXmlPath+tenantName+"/tie.xml"
    }
}

task runTieTestsOnly(type:Test) {
    useTestNG() {
        ignoreFailures = true
        suites baseXmlPath+tenantName+"/tie.xml"
        suites baseXmlPath+tenantName+"/tietraining.xml"
    }
}

task runVisibilityTests(type:Test) {
    useTestNG() {
        ignoreFailures = true
        suites baseXmlPath+tenantName+"/visibilitytests.xml"
    }
}

task runTouchTests(type:Test) {
    useTestNG() {
        ignoreFailures = true
        suites baseXmlPath+tenantName+"/uitests.xml"
        suites baseXmlPath+tenantName+"/aggregated_onethread_tests.xml"
        suites baseXmlPath+tenantName+"/aggregated_compatible_tests.xml"
    }
}

task runWebsocketsReqression(type:Test){
    useTestNG() {
        ignoreFailures = true
        suites baseXmlPath + tenantName + "/websockets_reqression.xml"
    }
}

task runTouchPullRequestTests(type:Test) {
    useTestNG() {
        ignoreFailures = true
        suites baseXmlPath+tenantName+"/widget_pullrequest.xml"
        suites baseXmlPath+tenantName+"/onethreadtests_pullrequest.xml"
    }
}

task runAllTests(type:Test){
    doFirst {
        runTieTests.execute()
        runBaseTests.execute()
    }
    doLast {
        runTouchTests.execute()
    }
}

task runPullRequestTests(type:Test){
    doFirst {
        runTiePullRequestTests.execute()
        runBaseTests.execute()
    }
    doLast {
        runTouchPullRequestTests.execute()
        runVisibilityTests.execute()
    }
}

task runPullRequestTestsDev(type:Test){
    useTestNG() {
        ignoreFailures = true
        suites baseXmlPath+tenantName+"/pullrequest.xml"
    }
}

task runTiePullRequestTests(type:Test) {
    useTestNG() {
        ignoreFailures = true
        suites baseXmlPath+tenantName+"/tiepullrequest.xml"
    }
}


task runWidgetOnlyTests(type:Test){
    doFirst {
        useTestNG() {
            ignoreFailures = true
            suites baseXmlPath+tenantName+"/uitests.xml"
        }
    }
}

task runTestsAgainstNewlyCreatedAccount(type:Test){
    useTestNG() {
        ignoreFailures = true
        suites baseXmlPath + "touchgo_deprecated/touchgofornewaccount.xml"
    }
}


task runTouchGoTests(type:Test){
    useTestNG() {
        ignoreFailures = true
        suites baseXmlPath + "touchgo/touchgosignup.xml"
        suites baseXmlPath + "touchgo/touchgonewtenant.xml"
        suites baseXmlPath + "touchgo/tocuhgocloseaccount.xml"
    }
}

task runHealthCheckTests(type:Test) {
    useTestNG() {
        useDefaultListeners = true
        ignoreFailures = true
        suites baseXmlPath+"/healthcheck.xml"
    }
    reports.html.enabled = false
}

task runDotControlTests(type:Test) {
    useTestNG() {
        useDefaultListeners = true
        ignoreFailures = true
        suites baseXmlPath+"/dotcontrol/dotcontrol.xml"
    }
    reports.html.enabled = false
}

task runCamundaFlowsTests(type:Test) {
    useTestNG() {
        useDefaultListeners = true
        ignoreFailures = true
        suites baseXmlPath+tenantName+"/camundaflows.xml"
    }
    reports.html.enabled = false
}


task runChatdeskTests(type:Test) {
    useTestNG() {
        ignoreFailures = true
        suites baseXmlPath+tenantName+"/chatdesk.xml"
    }
}


// ========= !! MAIN TASKS !! ============== //

task runTests(type: Test) {

    if (System.getProperty("suite") != null) {
        suite = System.properties.getProperty("suite")
    }

    if(suite == "websockets") {
        runTests.dependsOn(runWebsocketsReqression)
    }

    if(suite == "facebook") {
        runTests.dependsOn(runFacebookTests)
    }

    if(suite == "twitter") {
        runTests.dependsOn(runTwitterTests)
    }

    if(suite == "abc") {
        runTests.dependsOn(runAbcTests)
    }


    if(suite == "whatsapporca") {
        runTests.dependsOn(runWhatsAppOrcaTests)
    }


    if(suite == "basecheck") {
        runTests.dependsOn(runBaseTests)
    }

    if(suite == "tie") {
        runTests.dependsOn(runTieTestsOnly)
    }

    if(suite=="visibility"){
        runTests.dependsOn(runVisibilityTests)
    }

    if(suite=="all") {
        runTests.dependsOn(runAllTests)
    }

    if(suite=="pullrequest") {
        runTests.dependsOn(runPullRequestTests)
    }

    if(suite=="pullrequest_dev") {
        runTests.dependsOn(runPullRequestTestsDev)
    }

    if(suite=="widgetonly") {
        runTests.dependsOn(runWidgetOnlyTests)
    }

    if(suite=="tiepullrequest"){
        runTests.dependsOn(runTiePullRequestTests)
    }

    if(suite=="touchgo"){
        runTests.dependsOn(runTouchGoTests)
    }

    if(suite == "healthcheck") {
        runTests.dependsOn(runHealthCheckTests)
    }

    if(suite == "dotcontrol"){
        runTests.dependsOn(runDotControlTests)
    }

    if(suite == "camundaflows"){
        runTests.dependsOn(runCamundaFlowsTests)
    }

    if(suite == "chatdesk"){
        runTests.dependsOn(runChatdeskTests)
    }

    reportToTesFLO.dependsOn('allureReport')
    
    runTests.finalizedBy(reportToTesFLO)
    
    defaultTasks 'clean', 'runTests'
}

