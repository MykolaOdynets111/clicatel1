buildscript {
    dependencies {
        classpath "io.qameta.allure:allure-gradle:2.8.1"
    }
}

sourceSets {
    main {
        resources {
            srcDirs "src/main/resources"
        }
    }
}

apply plugin: 'io.qameta.allure'

def allureVersion = '2.17.3'
allure {
    configuration = 'compile'
    aspectjweaver = true
    version = allureVersion
    resultsDir = file("${rootProject.buildDir}${File.separator}allure-results")
    reportDir = file("${rootProject.buildDir}${File.separator}allure-report")
}

dependencies {
    api project(':unity')
}

def suite = "chat2pay"
def baseXmlPath = "/src/test/resources/suites"

tasks.withType(Test).configureEach {
    systemProperties = System.getProperties() as Map<String, ?>
}
tasks.withType(Copy).configureEach { duplicatesStrategy = DuplicatesStrategy.EXCLUDE }

tasks.withType(Test).configureEach {
    systemProperties = System.getProperties() as Map<String, ?>
}

// ========= !! TASKS FOR SUITES !! ============== //


tasks.register('runChat2PayTests', Test) {
    useTestNG() {
        ignoreFailures = true
        baseXmlPath + "/chat2pay.xml"
    }
}

// ========= !! MAIN TASKS !! ============== //

tasks.register('runTests', Test) {

    if (System.getProperty("suite") != null) {
        suite = System.properties.getProperty("suite")
    }
    if (suite == "chat2pay") {
        runTests.dependsOn(runChat2PayTests)
    }

    reportToTesFLO.dependsOn('allureReport')
    runTests.finalizedBy(reportToTesFLO)
    defaultTasks 'clean', 'runTests'
}