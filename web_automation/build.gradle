group 'web_authomation'
version '1.0-SNAPSHOT'

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "ru.d10xa:gradle-allure-plugin:0.5.5"
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'ru.d10xa.allure'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'io.appium', name: 'java-client', version: '5.0.4'
//    compile 'com.google.apis:google-api-services-gmail:v1-rev83-1.23.0'
    compile group: 'javax.mail', name: 'mail', version: '1.4.5'
    compile group: 'org.testcontainers', name: 'selenium', version: '1.4.3'
    compile group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '1.7.2'
//    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.7.1'
    compile group: 'ru.yandex.qatools.htmlelements', name: 'htmlelements-java', version: '1.18'
    compile group: 'ru.yandex.qatools.allure', name:'allure-cucumber-jvm-adaptor', version:'1.6.4'
    compile group: 'info.cukes', name: 'cucumber-java8', version: '1.2.5'
    compile group: 'info.cukes', name: 'cucumber-testng', version: '1.2.4'
    compile group: 'com.github.kirlionik', name: 'allure-cucumber-plugin', version: '1.0.2'
    compile group: 'io.rest-assured', name: 'rest-assured', version: '3.0.2'
    compile group: 'com.github.javafaker', name: 'javafaker', version: '0.14'
    compile group: 'org.twitter4j', name: 'twitter4j-core', version: '4.0.1'
    compile 'mysql:mysql-connector-java:5.1.+'
}

configurations {
    compile
}

allure{
    aspectjweaver = true
    testNG = false
    allureResultsDir = "$buildDir${File.separator}allure-results"
    allureReportDir = "$buildDir${File.separator}allure-report"
}

def baseXmlPath = "/src/test/resources/"
def tenantName = "generalbank"
def suite="all"

task runAllTests(type: Test) {

    if (System.getProperty("tenant") != null) {
        tenantName = System.properties.getProperty("tenant")
    }
    if (System.getProperty("suite") != null) {
        suite = System.properties.getProperty("suite")
    }

    if(suite == "facebook") {
        doFirst {
            runFacebookTests.execute()
        }}

    if(suite == "twitter") {
        doFirst {
            runTwitterTests.execute()
        }}


    if(suite == "tie") {
        doFirst {
            runTieTests.execute()
        }}

    if(suite=="visibility"){
        doFirst {
            runVisibilityTests.execute()
        }
    }

    if(suite=="all") {

        doFirst {
//            runTieTests.execute()
            runBaseTests.execute()
        }
        doLast {
            if (!(file("build/reports/tests/runBaseTests/testng-failed.xml").exists())) {
                System.out.print("!!! " + "no testng file" + " !!!")
                runAllTest.execute()
            }
            if (file("build/reports/tests/runBaseTests/testng-failed.xml").exists()) {
                String failedTestXMLContent = file("build/reports/tests/runBaseTests/testng-failed.xml").text
                if (!failedTestXMLContent.contains("Failed suite [Master check]")) {
                    runAllTest.execute()
                }
            }
            runVisibilityTests.execute()
        }
    }
    runAllTests.finalizedBy(allureReport)
    defaultTasks 'clean', 'runAllTests'
}

task runTieTests(type:Test) {
    if (System.getProperty("env") != null) {
        systemProperty "env", System.getProperty("env")
    }
    if (System.getProperty("remote") != null) {
        systemProperty "remote", System.properties.getProperty("remote")
    }
    if (System.getProperty("deploy_to") != null) {
        systemProperty "deploy_to", System.getProperty("deploy_to")
    }
    useTestNG() {
        ignoreFailures = true
        suites baseXmlPath+tenantName+"/tie.xml"
    }
}

task runBaseTests(type:Test) {
    if (System.getProperty("env") != null) {
        systemProperty "env", System.getProperty("env")
    }
    if (System.getProperty("remote") != null) {
        systemProperty "remote", System.properties.getProperty("remote")
    }
    if (System.getProperty("browser") != null) {
        systemProperty "browser", System.getProperty("browser")
    }
    if (System.getProperty("deploy_to") != null) {
        systemProperty "deploy_to", System.getProperty("deploy_to")
    }
    useTestNG() {
        println("base TEST ENV " + System.getProperty("env"))
        useDefaultListeners = true
        ignoreFailures = true
        suites baseXmlPath+tenantName+"/mastercheck.xml"
    }
    reports.html.enabled = false
}

task runAllTest(type:Test) {

    if (System.getProperty("env") != null) {
        systemProperty "env", System.getProperty("env")
    }
    if (System.getProperty("remote") != null) {
        systemProperty "remote", System.properties.getProperty("remote")
    }
    if (System.getProperty("browser") != null) {
        systemProperty "browser", System.getProperty("browser")
    }
    if (System.getProperty("deploy_to") != null) {
        systemProperty "deploy_to", System.getProperty("deploy_to")
    }
    useTestNG() {
        ignoreFailures = true
        suites baseXmlPath+tenantName+"/uitests.xml"
        suites baseXmlPath+tenantName+"/onethreadtests.xml"
    }
}

task runVisibilityTests(type:Test) {
    if (System.getProperty("env") != null) {
        systemProperty "env", System.getProperty("env")
    }
    if (System.getProperty("remote") != null) {
        systemProperty "remote", System.properties.getProperty("remote")
    }
    if (System.getProperty("browser") != null) {
        systemProperty "browser", System.getProperty("browser")
    }
    if (System.getProperty("deploy_to") != null) {
        systemProperty "deploy_to", System.getProperty("deploy_to")
    }
    useTestNG() {
        ignoreFailures = true
        suites baseXmlPath+tenantName+"/visibilitytests.xml"
    }
}

task runFacebookTests(type:Test) {
    if (System.getProperty("env") != null) {
        systemProperty "env", System.getProperty("env")
    }
    if (System.getProperty("remote") != null) {
        systemProperty "remote", System.properties.getProperty("remote")
    }
    if (System.getProperty("browser") != null) {
        systemProperty "browser", System.getProperty("browser")
    }
    if (System.getProperty("deploy_to") != null) {
        systemProperty "deploy_to", System.getProperty("deploy_to")
    }
    useTestNG() {
        ignoreFailures = true
        suites baseXmlPath + tenantName + "/facebook.xml"
    }
}

task runTwitterTests(type:Test) {
    if (System.getProperty("env") != null) {
        systemProperty "env", System.getProperty("env")
    }
    if (System.getProperty("remote") != null) {
        systemProperty "remote", System.properties.getProperty("remote")
    }
    if (System.getProperty("browser") != null) {
        systemProperty "browser", System.getProperty("browser")
    }
    if (System.getProperty("deploy_to") != null) {
        systemProperty "deploy_to", System.getProperty("deploy_to")
    }
    useTestNG() {
        ignoreFailures = true
        suites baseXmlPath + tenantName + "/twitter.xml"
    }
}